using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace SandboxGenerator
{
    [Generator]
    public class EnumReprGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new EnumSyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxReceiver is not EnumSyntaxReceiver syntaxReceiver)
                return;
            
            if (syntaxReceiver.EnumDeclarationNodes.Count == 0)
                return;
            
            var sb = new StringBuilder();

            sb.AppendLine("// <auto-generated />");
            sb.AppendLine("using System;");
            sb.AppendLine("namespace EnumExtension");
            sb.AppendLine("{");
            
            sb.AppendFormat("{0,4}", " ");
            sb.AppendLine("public static partial class EnumRepr");
            
            sb.AppendFormat("{0,4}{{\n", " ");
            foreach (var (module, name, members) in GetEnumInfo(syntaxReceiver.EnumDeclarationNodes))
            {
                sb.AppendFormat("{0,8}", " ");
                sb.AppendLine($@"public static string Repr(this {module}.{name} value) => value switch");
                sb.AppendFormat("{0,8}{{\n", " ");
                
                foreach (var member in members)
                {
                    sb.AppendFormat("{0,12}", " ");
                    sb.AppendLine(@$"{module}.{name}.{member} => ""{member}"",");
                }
                sb.AppendFormat("{0,12}", " ");
                sb.AppendLine($"_ => throw new {nameof(ArgumentOutOfRangeException)}(nameof(value), value, null)");
                
                sb.AppendFormat("{0,8}}};\n", " ");
            }

            sb.AppendFormat("{0,4}}}\n", " ");
            sb.AppendLine("}");
            
            context.AddSource($"EnumReprGenerator", SourceText.From(sb.ToString(), Encoding.UTF8));
        }

        private static IEnumerable<(string module, string name, IEnumerable<string> members)> 
            GetEnumInfo(IEnumerable<EnumDeclarationSyntax> nodes)
        {
            foreach (var node in nodes)
            {
                var module = node.Ancestors().OfType<NamespaceDeclarationSyntax>()
                    .Select(p => p.Name.ToString()).Reverse().Aggregate((x, y) => $"{x}.{y}");
                var name = node.Identifier.Text;
                var members = node.Members.Select(p => p.Identifier.Text);
                yield return (module, name, members);
            }
        }
    }
}